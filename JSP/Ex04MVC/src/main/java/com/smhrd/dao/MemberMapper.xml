<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.smhrd.dao.MemberDAO">
	<!-- Mapper는 DAO와 짝 : namespace 속성으로 짝꿍 DAO가 누군지 알려주어야한다. -->

	<!-- Mybatis 기존 jdbc : java 코드 + SQL >> SQL문이 String 타입, 유지보수 힘들고 복잡한 SQL문을 
		사용하기 힘듦 실행결과를 가공하는 별도의 코드 추가되어 작업양이 많음 MyBatis : java 코드와 SQL문을 분리 DAO(java) 
		<-mapping-> Mapper(SQL문 정의) -->
	<!-- Mapper : 태그 안에 SQL문을 정의 / 태그 이름 == 사용하고자하는 SQL문의 키워드 #{필드 변수명} : 해당하는 
		자리에 변수값을 집어넣어준다. 자료형 구분 자동 태그의 필수 속성들을 잘 정의해야함 insert, delete, update : id 
		- parameterType - 어떤 DTO로 묶어서 데이터를 넣어주는지 -->
	<insert id="join" parameterType="com.smhrd.entity.Member">
		insert into MEMBER
		values(
		#{id},
		#{pw},
		#{gender},
		#{nick},
		#{tel}
		)
	</insert>

	<!-- select 필수 속성 resultType : 조회결과를 어떤 데이터 타입으로 변환해서 받을지 MyBatis에서는 조회결과를 
		자동으로 변환 결과 1개 >> DTO 결과 여러개 >> List<DTO> 조건) 1. table column명 == DTO 필드 변수명 
		2. DTO에 기본생성자가 존재해야 함 3. setter 메소드가 존재해야 함 -->
	<select id="login" parameterType="com.smhrd.entity.Member"
		resultType="com.smhrd.entity.Member">
		select * from MEMBER
		where id = #{id}
		and pw = #{pw}
	</select>


	<update id="update" parameterType="com.smhrd.entity.Member">
		UPDATE MEMBER 
		set pw = #{pw},
			gender = #{gender},
			tel = #{tel}
		where id = #{id}
	</update>


	<delete id="delete" parameterType="com.smhrd.entity.Member">
		delete from MEMBER
		where id = #{id}
		  and pw = #{pw}
		
	</delete>








</mapper>